row.names(siatka) = S_v
return(siatka)
}
###################################
#CALL##############################
###################################
library(fExoticOptions)
dS <- 50
zmiennosc_roczna <- 0.2
bariera <- 2400
K <- 2150
r <- 0.01
dt <- 1/(zmiennosc_roczna^2*ceiling(bariera/dS)^2)
#europejska
wynik = finite_diference_call(dS = dS, dt = dt, K = K, r = r, zmiennosc_roczna = zmiennosc_roczna, bariera = bariera)
wynik_douglas <- douglas_scheme_call(dS = dS, dt = dt, K = K, r = r, zmiennosc_roczna = zmiennosc_roczna, bariera = bariera)
#zrobilem funkcje, ktora zamienia wynik na df, nie wiem czy potrzeba
df_wynik <- to_df(wynik, dt)
df_wynik_douglas <- to_df(wynik_douglas, dt)
df_wynik_BSM <- cena_opcji(df_wynik = df_wynik, K = K, r = r, sigma = zmiennosc_roczna, bariera = bariera)
#MSE
mean((df_wynik$option_value-df_wynik_BSM$option_value)^2)/nrow(df_wynik)
mean((df_wynik$option_value-df_wynik_douglas$option_value)^2)/nrow(df_wynik)
wplot <- plot_ly(x = time, y = df_wynik$S,
z = wynik) %>% add_surface() %>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wplot <- plot_ly(x = df_wynik$t, y = df_wynik$S,
z = wynik) %>% add_surface() %>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot <- plot_ly(x = df_wynik$t, y = df_wynik$S,
z = wynik) %>% add_surface() %>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wplot <- plot_ly(x = df_wynik$t[length(df_wynik$t):1], y = df_wynik$S,
z = wynik) %>% add_surface() %>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wplot <- plot_ly(x = df_wynik$t, y = df_wynik$S,
z = wynik) %>% add_surface() %>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wplot <- plot_ly(
z = wynik) %>% add_surface() %>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = wynik) %>% add_surface() %>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = wynik, colors = 'Greys',type = 'heatmap')%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = wynik, type = 'heatmap')%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = wynik, colors = colorRamp(c("red", "green")), type = 'heatmap')%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
vals <- unique(scales::rescale(c(wynik)))
o <- order(vals, decreasing = FALSE)
cols <- scales::col_numeric("Blues", domain = NULL)(vals)
colz <- setNames(data.frame(vals[o], cols[o]), NULL)
wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = wynik, colorscale = colz, type = 'heatmap')%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = wynik, type = 'heatmap')%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wynik*4
wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = (wynik*10), type = 'heatmap')%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
View(wynik)
heat <- wynik*50
wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = heat, type = 'heatmap')%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = wynik, type = 'heatmap')%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
heat <- wynik
wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = wynik )  %>% add_surface(
contours = list(
z = list(
show=TRUE,
usecolormap=TRUE,
highlightcolor="#ff0000",
project=list(z=TRUE)
)
)
) %>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = heat, type = 'scatter3d', mode = 'lines')%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = heat, type = 'contour')%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = heat, type = 'contour', autocontour = TRUE,
contours = list(
end = 26,
size = 2,
start = 2
),
line = list(smoothing = 0.85))%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = heat, type = 'contour', autocontour = TRUE,
contours = list(
end = 200,
size = 2,
start = 2
),
line = list(smoothing = 0.85))%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = heat, type = 'contour', mode = 'lines')%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = heat, type = 'contour', colorscale = 'electric')%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wplot <- plot_ly(
z = heat, type = 'contour', colorscale = 'electric', dx = dt, dy = dS)%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = heat, type = 'contour', colorscale = 'electric', contours_coloring = 'electric')%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = heat, type = 'contour', autocolorscale = TRUE)%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = heat, type = 'contour', autocolorscale = TRUE, opacity = 0.05)%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = heat, type = 'contour', autocolorscale = TRUE, opacity = 1)%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = heat, type = 'contour', autocolorscale = TRUE, opacity = 0.5)%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = heat, type = 'contour', autocolorscale = TRUE, opacity =10)%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = wynik)
%>% add_surface(
contours = list(
z = list(
show=TRUE,
usecolormap=TRUE,
highlightcolor="#ff0000",
project=list(z=TRUE)
)
)
)%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = wynik) %>%
add_surface(
contours = list(
z = list(
show=TRUE,
usecolormap=TRUE,
highlightcolor="#ff0000",
project=list(z=TRUE)
)
)
)%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wynik = finite_diference_call(dS = dS, dt = dt, K = K, r = r, zmiennosc_roczna = zmiennosc_roczna, bariera = bariera, amerykanska = T)
df_wynik <- to_df(wynik, dt)
#DLA AMERYKANSKIEJ NIE MAM POROWNANIA, TRZEBA POSZUKAC
plot3d(y = df_wynik$S, x = df_wynik$t, z = df_wynik$option_value)
wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = wynik) %>%
add_surface(
contours = list(
z = list(
show=TRUE,
usecolormap=TRUE,
highlightcolor="#ff0000",
project=list(z=TRUE)
)
)
)%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
dplot <- function(wynik){wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = wynik) %>%
add_surface(
contours = list(
z = list(
show=TRUE,
usecolormap=TRUE,
highlightcolor="#ff0000",
project=list(z=TRUE)
)
)
)%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot}
bariera <- 1900
#dla EP 3*k
dt <- 1/(zmiennosc_roczna^2*ceiling(K * 3/dS)^2)
wynik = finite_diference_put(dS = dS, dt = dt, K = K, r = r, zmiennosc_roczna = zmiennosc_roczna, bariera = bariera)
df_wynik <- to_df(wynik, dt)
df_wynik_BSM <- cena_opcji(df_wynik = df_wynik, K = K, r = r, sigma = zmiennosc_roczna, bariera = bariera, czy_put = T)
mean((df_wynik$option_value-df_wynik_BSM$option_value)^2)/nrow(df_wynik)
plot3d(y = df_wynik$S, x = df_wynik$t, z = df_wynik$option_value)
bariera <- 1900
#dla EP 3*k
dt <- 1/(zmiennosc_roczna^2*ceiling(K * 3/dS)^2)
wynik = finite_diference_put(dS = dS, dt = dt, K = K, r = r, zmiennosc_roczna = zmiennosc_roczna, bariera = bariera)
df_wynik <- to_df(wynik, dt)
df_wynik_BSM <- cena_opcji(df_wynik = df_wynik, K = K, r = r, sigma = zmiennosc_roczna, bariera = bariera, czy_put = T)
mean((df_wynik$option_value-df_wynik_BSM$option_value)^2)/nrow(df_wynik)
dplot(wynik )
dplot <- function(wynik, bariera, K){wplot <- plot_ly(x = seq(0, 0.837, dt),
y = seq(bariera, K*3, dS),
z = wynik) %>%
add_surface(
contours = list(
z = list(
show=TRUE,
usecolormap=TRUE,
highlightcolor="#ff0000",
project=list(z=TRUE)
)
)
)%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot}
dplot(wynik ,bariera, K)
View(wynik)
wynik = finite_diference_put(dS = dS, dt = dt, K = K, r = r, zmiennosc_roczna = zmiennosc_roczna, bariera = bariera, amerykanska = T)
dplot(wynik ,bariera, K)
View(df_wynik)
View(df_wynik)
library(tidyverse)
library(ggplot2)
library(fExoticOptions)
dS <- 50
zmiennosc_roczna <- 0.2
bariera <- 2400
K <- 2150
r <- 0.01
dt <- 1/(zmiennosc_roczna^2*ceiling(bariera/dS)^2)
#europejska
wynik = finite_diference_call(dS = dS, dt = dt, K = K, r = r, zmiennosc_roczna = zmiennosc_roczna, bariera = bariera)
wynik_douglas <- douglas_scheme_call(dS = dS, dt = dt, K = K, r = r, zmiennosc_roczna = zmiennosc_roczna, bariera = bariera)
#zrobilem funkcje, ktora zamienia wynik na df, nie wiem czy potrzeba
df_wynik <- to_df(wynik, dt)
df_wynik_douglas <- to_df(wynik_douglas, dt)
df_wynik_BSM <- cena_opcji(df_wynik = df_wynik, K = K, r = r, sigma = zmiennosc_roczna, bariera = bariera)
#MSE
mean((df_wynik$option_value-df_wynik_BSM$option_value)^2)/nrow(df_wynik)
mean((df_wynik$option_value-df_wynik_douglas$option_value)^2)/nrow(df_wynik)
library(ggplot2)
g1 <- ggplot(wynik, aes(x = S, t)) +
geom_tile(aes(fill = option_value))
g1
g1 <- ggplot(df_wynik, aes(x = S, t)) +
geom_tile(aes(fill = option_value))
g1
df_wynik.skewed$option_value.f <- cut(df_wynik.skewed$option_value,
breaks = c(min(df_wynik.skewed$option_value), 0, 0.01, 0.03, 0.05, 0.1, 10, 20, 30, max(df_wynik.skewed$option_value)),
labels = c("<0%", "0-1%", "1%-3%", "3%-5%", "5%-10%", "10%-1000%", "1000%-2000%", "2000%-3000%", ">3000%"), include.lowest = T)
g2 <- gplot(df_wynik.skewed, aes(x = S, t)) +
geom_tile(aes(fill = option_value.f)) +
geom_text(aes(label = round(option_value, 3))) +
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
scale_fill_manual(values = RColorBrewer::brewer.pal(9, "PiYG")) # Use RColorBrewer for discrete categories
g2
df_wynik.skewed$option_value.f <- cut(df_wynik.skewed$option_value,
breaks = c(min(df_wynik.skewed$option_value), 0, 0.01, 0.03, 0.05, 0.1, 10, 20, 30, max(df_wynik.skewed$option_value)),
labels = c("<0%", "0-1%", "1%-3%", "3%-5%", "5%-10%", "10%-1000%", "1000%-2000%", "2000%-3000%", ">3000%"), include.lowest = T)
g2 <- ggplot(df_wynik.skewed, aes(x = S, t)) +
geom_tile(aes(fill = option_value.f)) +
geom_text(aes(label = round(option_value, 3))) +
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
scale_fill_manual(values = RColorBrewer::brewer.pal(9, "PiYG")) # Use RColorBrewer for discrete categories
g2
df_wynik$option_value.f <- cut(df_wynik$option_value,
breaks = c(min(df_wynik$option_value), 0, 0.01, 0.03, 0.05, 0.1, 10, 20, 30, max(df_wynik$option_value)),
labels = c("<0%", "0-1%", "1%-3%", "3%-5%", "5%-10%", "10%-1000%", "1000%-2000%", "2000%-3000%", ">3000%"), include.lowest = T)
g2 <- ggplot(df_wynik, aes(x = S, t)) +
geom_tile(aes(fill = option_value.f)) +
geom_text(aes(label = round(option_value, 3))) +
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
scale_fill_manual(values = RColorBrewer::brewer.pal(9, "PiYG")) # Use RColorBrewer for discrete categories
g2
df_wynik$option_value <- cut(df_wynik$option_value,
breaks = c(min(df_wynik$option_value), 0, 0.01, 0.03, 0.05, 0.1, 10, 20, 30, max(df_wynik$option_value)),
labels = c("<0%", "0-1%", "1%-3%", "3%-5%", "5%-10%", "10%-1000%", "1000%-2000%", "2000%-3000%", ">3000%"), include.lowest = T)
g2 <- ggplot(df_wynik, aes(x = S, t)) +
geom_tile(aes(fill = option_value)) +
geom_text(aes(label = round(option_value, 3))) +
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
scale_fill_manual(values = RColorBrewer::brewer.pal(9, "PiYG")) # Use RColorBrewer for discrete categories
g2
wynik = finite_diference_call(dS = dS, dt = dt, K = K, r = r, zmiennosc_roczna = zmiennosc_roczna, bariera = bariera)
wynik_douglas <- douglas_scheme_call(dS = dS, dt = dt, K = K, r = r, zmiennosc_roczna = zmiennosc_roczna, bariera = bariera)
#zrobilem funkcje, ktora zamienia wynik na df, nie wiem czy potrzeba
df_wynik <- to_df(wynik, dt)
df_wynik_douglas <- to_df(wynik_douglas, dt)
df_wynik_BSM <- cena_opcji(df_wynik = df_wynik, K = K, r = r, sigma = zmiennosc_roczna, bariera = bariera)
#MSE
mean((df_wynik$option_value-df_wynik_BSM$option_value)^2)/nrow(df_wynik)
mean((df_wynik$option_value-df_wynik_douglas$option_value)^2)/nrow(df_wynik)
hist(df_wynik$option_value)
sum(df_wynik$option_value <=1 ) - sum(df_wynik$option_value == 0)
sum(df_wynik$option_value <=0.5 ) - sum(df_wynik$option_value == 0)
sum(df_wynik$option_value <=0.1 ) - sum(df_wynik$option_value == 0)
sum(df_wynik$option_value <=0.05 ) - sum(df_wynik$option_value == 0)
sum(df_wynik$option_value <=0.001 ) - sum(df_wynik$option_value == 0)
sum(df_wynik$option_value <=1 ) - sum(df_wynik$option_value <= 0.01)
sum(df_wynik$option_value <=0.5 ) - sum(df_wynik$option_value <= 0.01)
vect <- c(1,2, seq(1,10, by =1))
vect
paste(1:12)
breaks <- c( 0, 0.01, 0.5, 1, 3, 5, 7,
seq(10, max(df_wynik$option_value), by = 10))
paste(breaks)
paste(breaks, "<=")
paste("<", breaks)
paste("=<", breaks)
breaki <- c( 0, 0.01, 0.5, 1, 3, 5, 7,
seq(10, max(df_wynik$option_value), by = 10))
df_wynik$option_value.f <- cut(df_wynik$option_value,
breaks = breaki,
labels = paste("=<", breaki), include.lowest = T)
length(breaki)
lebgth(paste("=<", breaki))
length(paste("=<", breaki))
breaki <- c( 0, 0.01, 0.5, 1, 3, 5, 7,
seq(10, max(df_wynik$option_value), by = 10))
labelki = paste("=<", breaki)
df_wynik$option_value.f <- cut(df_wynik$option_value,
breaks = breaki,
labels = labelki, include.lowest = T)
breaki
labelki
?cut
df_wynik$option_value.f <- cut(df_wynik$option_value,
breaks = breaki,
labels = labelki)
df_wynik$option_value.f <- cut(df_wynik$option_value,
breaks = breaki,
include.lowest = T)
g2 <- ggplot(df_wynik, aes(x = S, t)) +
geom_tile(aes(fill = option_value.f)) +
geom_text(aes(label = round(option_value.f, 3))) +
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
scale_fill_manual(values = RColorBrewer::brewer.pal(9, "PiYG")) # Use RColorBrewer for discrete categories
g2
g2 <- ggplot(df_wynik, aes(x = S, t)) +
geom_tile(aes(fill = option_value.f)) +
geom_text(aes(label = option_value.f)) +
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
scale_fill_manual(values = RColorBrewer::brewer.pal(9, "PiYG")) # Use RColorBrewer for discrete categories
g2
g2 <- ggplot(df_wynik, aes(x = S, t)) +
geom_tile(aes(fill = option_value.f)) +
geom_text(aes(label = option_value.f)) +
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
scale_fill_manual(values = RColorBrewer::brewer.pal(20, "PiYG")) # Use RColorBrewer for discrete categories
g2
g2 <- ggplot(df_wynik, aes(x = S, t)) +
geom_tile(aes(fill = option_value.f)) +
geom_text(aes(label = option_value.f))
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
#scale_fill_manual(values = RColorBrewer::brewer.pal(20, "PiYG")) # Use RColorBrewer for discrete categories
g2
g2 <- ggplot(df_wynik, aes(x = S, t)) +
geom_tile(aes(fill = option_value.f))
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
#scale_fill_manual(values = RColorBrewer::brewer.pal(20, "PiYG")) # Use RColorBrewer for discrete categories
g2
g2 <- ggplot(df_wynik, aes(x = S, t, colour = option_value.f)) +
geom_tile(aes(fill = option_value.f)) + labs()
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
#scale_fill_manual(values = RColorBrewer::brewer.pal(20, "PiYG")) # Use RColorBrewer for discrete categories
g2
g2 <- ggplot(df_wynik, aes(x = S, t, colour = option_value.f)) +
geom_tile() + labs()
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
#scale_fill_manual(values = RColorBrewer::brewer.pal(20, "PiYG")) # Use RColorBrewer for discrete categories
g2
g2 <- ggplot(df_wynik, aes(x = S, t, colour = option_value.f)) +
geom_tile(aes(fill = option_value.f)) + labs(colour = 'wartosc')
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
#scale_fill_manual(values = RColorBrewer::brewer.pal(20, "PiYG")) # Use RColorBrewer for discrete categories
g2
g2 <- ggplot(df_wynik, aes(x = S, t)) +
geom_tile(aes(fill = option_value.f)) + labs(colour = 'wartosc')
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
#scale_fill_manual(values = RColorBrewer::brewer.pal(20, "PiYG")) # Use RColorBrewer for discrete categories
g2
g2 <- ggplot(df_wynik, aes(x = t, S)) +
geom_tile(aes(fill = option_value.f)) + labs(title = 'Wartosci opcji EC@2150, dla bariery 2400')
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
#scale_fill_manual(values = RColorBrewer::brewer.pal(20, "PiYG")) # Use RColorBrewer for discrete categories
g2
wynik = finite_diference_call(dS = dS, dt = dt, K = K, r = r, zmiennosc_roczna = zmiennosc_roczna, bariera = bariera, amerykanska = T)
g2 <- ggplot(df_wynik, aes(x = t, S)) +
geom_tile(aes(fill = option_value.f)) + labs(title = 'Wartosci opcji AC@2150, dla bariery 2400')
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
#scale_fill_manual(values = RColorBrewer::brewer.pal(20, "PiYG")) # Use RColorBrewer for discrete categories
g2
breaki <- c( 0, 0.01, 1, 3, 5,
seq(10, max(df_wynik$option_value), by = 10))
g2 <- ggplot(df_wynik, aes(x = t, S)) +
geom_tile(aes(fill = option_value.f)) + labs(title = 'Wartosci opcji AC@2150, dla bariery 2400')
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
#scale_fill_manual(values = RColorBrewer::brewer.pal(20, "PiYG")) # Use RColorBrewer for discrete categories
g2
wynik = finite_diference_call(dS = dS, dt = dt, K = K, r = r, zmiennosc_roczna = zmiennosc_roczna, bariera = bariera, amerykanska = T)
df_wynik <- to_df(wynik, dt)
breaki <- c( 0, 0.01, 1, 3, 5,
seq(10, max(df_wynik$option_value), by = 10))
g2 <- ggplot(df_wynik, aes(x = t, S)) +
geom_tile(aes(fill = option_value.f)) + labs(title = 'Wartosci opcji AC@2150, dla bariery 2400')
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
#scale_fill_manual(values = RColorBrewer::brewer.pal(20, "PiYG")) # Use RColorBrewer for discrete categories
g2
breaki <- c( 0, 0.01, 1, 3, 5,
seq(10, max(df_wynik$option_value), by = 10))
df_wynik$option_value.f <- cut(df_wynik$option_value,
breaks = breaki,
include.lowest = T)
g2 <- ggplot(df_wynik, aes(x = t, S)) +
geom_tile(aes(fill = option_value.f)) + labs(title = 'Wartosci opcji AC@2150, dla bariery 2400')
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
#scale_fill_manual(values = RColorBrewer::brewer.pal(20, "PiYG")) # Use RColorBrewer for discrete categories
g2
breaki <- c( 0, 0.01, 0.5, 1, 3, 5, 7,
seq(10, max(df_wynik$option_value), by = 10))
labelki = paste("=<", breaki)
df_wynik$option_value.f <- cut(df_wynik$option_value,
breaks = breaki,
include.lowest = T)
g2 <- ggplot(df_wynik, aes(x = t, S)) +
geom_tile(aes(fill = option_value.f)) + labs(title = 'Wartosci opcji AC@2150, dla bariery 2400')
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
#scale_fill_manual(values = RColorBrewer::brewer.pal(20, "PiYG")) # Use RColorBrewer for discrete categories
g2
bariera <- 1900
#dla EP 3*k
dt <- 1/(zmiennosc_roczna^2*ceiling(K * 3/dS)^2)
wynik = finite_diference_put(dS = dS, dt = dt, K = K, r = r, zmiennosc_roczna = zmiennosc_roczna, bariera = bariera)
df_wynik <- to_df(wynik, dt)
breaki <- c( 0, 0.01, 0.5, 1, 3, 5, 7,
seq(10, max(df_wynik$option_value), by = 10))
labelki = paste("=<", breaki)
df_wynik$option_value.f <- cut(df_wynik$option_value,
breaks = breaki,
include.lowest = T)
g2 <- ggplot(df_wynik, aes(x = t, S)) +
geom_tile(aes(fill = option_value.f)) + labs(title = 'Wartosci opcji AC@2150, dla bariery 2400')
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
#scale_fill_manual(values = RColorBrewer::brewer.pal(20, "PiYG")) # Use RColorBrewer for discrete categories
g2
breaki <- c( 0, 0.01, 0.5, 1, 3, 5, 7,
seq(10, max(df_wynik$option_value), by = 10))
labelki = paste("=<", breaki)
df_wynik$option_value.f <- cut(df_wynik$option_value,
breaks = breaki,
include.lowest = T)
g2 <- ggplot(df_wynik, aes(x = t, S)) +
geom_tile(aes(fill = option_value.f)) + labs(title = 'Wartosci opcji EP@2150, dla bariery 1900')
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
#scale_fill_manual(values = RColorBrewer::brewer.pal(20, "PiYG")) # Use RColorBrewer for discrete categories
g2
wynik = finite_diference_put(dS = dS, dt = dt, K = K, r = r, zmiennosc_roczna = zmiennosc_roczna, bariera = bariera, amerykanska = T)
df_wynik <- to_df(wynik, dt)
breaki <- c( 0, 0.01, 0.5, 1, 3, 5, 7,
seq(10, max(df_wynik$option_value), by = 10))
labelki = paste("=<", breaki)
df_wynik$option_value.f <- cut(df_wynik$option_value,
breaks = breaki,
include.lowest = T)
g2 <- ggplot(df_wynik, aes(x = t, S)) +
geom_tile(aes(fill = option_value.f)) + labs(title = 'Wartosci opcji AP@2150, dla bariery 1900')
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
#scale_fill_manual(values = RColorBrewer::brewer.pal(20, "PiYG")) # Use RColorBrewer for discrete categories
g2
