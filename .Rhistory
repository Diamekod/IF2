wplot
wplot <- plot_ly(
z = heat, type = 'contour', colorscale = 'electric', dx = dt, dy = dS)%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = heat, type = 'contour', colorscale = 'electric', contours_coloring = 'electric')%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = heat, type = 'contour', autocolorscale = TRUE)%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = heat, type = 'contour', autocolorscale = TRUE, opacity = 0.05)%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = heat, type = 'contour', autocolorscale = TRUE, opacity = 1)%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = heat, type = 'contour', autocolorscale = TRUE, opacity = 0.5)%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = heat, type = 'contour', autocolorscale = TRUE, opacity =10)%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = wynik)
%>% add_surface(
contours = list(
z = list(
show=TRUE,
usecolormap=TRUE,
highlightcolor="#ff0000",
project=list(z=TRUE)
)
)
)%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = wynik) %>%
add_surface(
contours = list(
z = list(
show=TRUE,
usecolormap=TRUE,
highlightcolor="#ff0000",
project=list(z=TRUE)
)
)
)%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
wynik = finite_diference_call(dS = dS, dt = dt, K = K, r = r, zmiennosc_roczna = zmiennosc_roczna, bariera = bariera, amerykanska = T)
df_wynik <- to_df(wynik, dt)
#DLA AMERYKANSKIEJ NIE MAM POROWNANIA, TRZEBA POSZUKAC
plot3d(y = df_wynik$S, x = df_wynik$t, z = df_wynik$option_value)
wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = wynik) %>%
add_surface(
contours = list(
z = list(
show=TRUE,
usecolormap=TRUE,
highlightcolor="#ff0000",
project=list(z=TRUE)
)
)
)%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot
dplot <- function(wynik){wplot <- plot_ly(x = seq(0, 0.837, dt), y = seq(0, bariera, dS),
z = wynik) %>%
add_surface(
contours = list(
z = list(
show=TRUE,
usecolormap=TRUE,
highlightcolor="#ff0000",
project=list(z=TRUE)
)
)
)%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot}
bariera <- 1900
#dla EP 3*k
dt <- 1/(zmiennosc_roczna^2*ceiling(K * 3/dS)^2)
wynik = finite_diference_put(dS = dS, dt = dt, K = K, r = r, zmiennosc_roczna = zmiennosc_roczna, bariera = bariera)
df_wynik <- to_df(wynik, dt)
df_wynik_BSM <- cena_opcji(df_wynik = df_wynik, K = K, r = r, sigma = zmiennosc_roczna, bariera = bariera, czy_put = T)
mean((df_wynik$option_value-df_wynik_BSM$option_value)^2)/nrow(df_wynik)
plot3d(y = df_wynik$S, x = df_wynik$t, z = df_wynik$option_value)
bariera <- 1900
#dla EP 3*k
dt <- 1/(zmiennosc_roczna^2*ceiling(K * 3/dS)^2)
wynik = finite_diference_put(dS = dS, dt = dt, K = K, r = r, zmiennosc_roczna = zmiennosc_roczna, bariera = bariera)
df_wynik <- to_df(wynik, dt)
df_wynik_BSM <- cena_opcji(df_wynik = df_wynik, K = K, r = r, sigma = zmiennosc_roczna, bariera = bariera, czy_put = T)
mean((df_wynik$option_value-df_wynik_BSM$option_value)^2)/nrow(df_wynik)
dplot(wynik )
dplot <- function(wynik, bariera, K){wplot <- plot_ly(x = seq(0, 0.837, dt),
y = seq(bariera, K*3, dS),
z = wynik) %>%
add_surface(
contours = list(
z = list(
show=TRUE,
usecolormap=TRUE,
highlightcolor="#ff0000",
project=list(z=TRUE)
)
)
)%>%
layout(scene = list(xaxis = list(title = "t"), yaxis = list(title = "S")))
wplot}
dplot(wynik ,bariera, K)
View(wynik)
wynik = finite_diference_put(dS = dS, dt = dt, K = K, r = r, zmiennosc_roczna = zmiennosc_roczna, bariera = bariera, amerykanska = T)
dplot(wynik ,bariera, K)
View(df_wynik)
View(df_wynik)
library(tidyverse)
library(ggplot2)
library(fExoticOptions)
dS <- 50
zmiennosc_roczna <- 0.2
bariera <- 2400
K <- 2150
r <- 0.01
dt <- 1/(zmiennosc_roczna^2*ceiling(bariera/dS)^2)
#europejska
wynik = finite_diference_call(dS = dS, dt = dt, K = K, r = r, zmiennosc_roczna = zmiennosc_roczna, bariera = bariera)
wynik_douglas <- douglas_scheme_call(dS = dS, dt = dt, K = K, r = r, zmiennosc_roczna = zmiennosc_roczna, bariera = bariera)
#zrobilem funkcje, ktora zamienia wynik na df, nie wiem czy potrzeba
df_wynik <- to_df(wynik, dt)
df_wynik_douglas <- to_df(wynik_douglas, dt)
df_wynik_BSM <- cena_opcji(df_wynik = df_wynik, K = K, r = r, sigma = zmiennosc_roczna, bariera = bariera)
#MSE
mean((df_wynik$option_value-df_wynik_BSM$option_value)^2)/nrow(df_wynik)
mean((df_wynik$option_value-df_wynik_douglas$option_value)^2)/nrow(df_wynik)
library(ggplot2)
g1 <- ggplot(wynik, aes(x = S, t)) +
geom_tile(aes(fill = option_value))
g1
g1 <- ggplot(df_wynik, aes(x = S, t)) +
geom_tile(aes(fill = option_value))
g1
df_wynik.skewed$option_value.f <- cut(df_wynik.skewed$option_value,
breaks = c(min(df_wynik.skewed$option_value), 0, 0.01, 0.03, 0.05, 0.1, 10, 20, 30, max(df_wynik.skewed$option_value)),
labels = c("<0%", "0-1%", "1%-3%", "3%-5%", "5%-10%", "10%-1000%", "1000%-2000%", "2000%-3000%", ">3000%"), include.lowest = T)
g2 <- gplot(df_wynik.skewed, aes(x = S, t)) +
geom_tile(aes(fill = option_value.f)) +
geom_text(aes(label = round(option_value, 3))) +
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
scale_fill_manual(values = RColorBrewer::brewer.pal(9, "PiYG")) # Use RColorBrewer for discrete categories
g2
df_wynik.skewed$option_value.f <- cut(df_wynik.skewed$option_value,
breaks = c(min(df_wynik.skewed$option_value), 0, 0.01, 0.03, 0.05, 0.1, 10, 20, 30, max(df_wynik.skewed$option_value)),
labels = c("<0%", "0-1%", "1%-3%", "3%-5%", "5%-10%", "10%-1000%", "1000%-2000%", "2000%-3000%", ">3000%"), include.lowest = T)
g2 <- ggplot(df_wynik.skewed, aes(x = S, t)) +
geom_tile(aes(fill = option_value.f)) +
geom_text(aes(label = round(option_value, 3))) +
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
scale_fill_manual(values = RColorBrewer::brewer.pal(9, "PiYG")) # Use RColorBrewer for discrete categories
g2
df_wynik$option_value.f <- cut(df_wynik$option_value,
breaks = c(min(df_wynik$option_value), 0, 0.01, 0.03, 0.05, 0.1, 10, 20, 30, max(df_wynik$option_value)),
labels = c("<0%", "0-1%", "1%-3%", "3%-5%", "5%-10%", "10%-1000%", "1000%-2000%", "2000%-3000%", ">3000%"), include.lowest = T)
g2 <- ggplot(df_wynik, aes(x = S, t)) +
geom_tile(aes(fill = option_value.f)) +
geom_text(aes(label = round(option_value, 3))) +
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
scale_fill_manual(values = RColorBrewer::brewer.pal(9, "PiYG")) # Use RColorBrewer for discrete categories
g2
df_wynik$option_value <- cut(df_wynik$option_value,
breaks = c(min(df_wynik$option_value), 0, 0.01, 0.03, 0.05, 0.1, 10, 20, 30, max(df_wynik$option_value)),
labels = c("<0%", "0-1%", "1%-3%", "3%-5%", "5%-10%", "10%-1000%", "1000%-2000%", "2000%-3000%", ">3000%"), include.lowest = T)
g2 <- ggplot(df_wynik, aes(x = S, t)) +
geom_tile(aes(fill = option_value)) +
geom_text(aes(label = round(option_value, 3))) +
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
scale_fill_manual(values = RColorBrewer::brewer.pal(9, "PiYG")) # Use RColorBrewer for discrete categories
g2
wynik = finite_diference_call(dS = dS, dt = dt, K = K, r = r, zmiennosc_roczna = zmiennosc_roczna, bariera = bariera)
wynik_douglas <- douglas_scheme_call(dS = dS, dt = dt, K = K, r = r, zmiennosc_roczna = zmiennosc_roczna, bariera = bariera)
#zrobilem funkcje, ktora zamienia wynik na df, nie wiem czy potrzeba
df_wynik <- to_df(wynik, dt)
df_wynik_douglas <- to_df(wynik_douglas, dt)
df_wynik_BSM <- cena_opcji(df_wynik = df_wynik, K = K, r = r, sigma = zmiennosc_roczna, bariera = bariera)
#MSE
mean((df_wynik$option_value-df_wynik_BSM$option_value)^2)/nrow(df_wynik)
mean((df_wynik$option_value-df_wynik_douglas$option_value)^2)/nrow(df_wynik)
hist(df_wynik$option_value)
sum(df_wynik$option_value <=1 ) - sum(df_wynik$option_value == 0)
sum(df_wynik$option_value <=0.5 ) - sum(df_wynik$option_value == 0)
sum(df_wynik$option_value <=0.1 ) - sum(df_wynik$option_value == 0)
sum(df_wynik$option_value <=0.05 ) - sum(df_wynik$option_value == 0)
sum(df_wynik$option_value <=0.001 ) - sum(df_wynik$option_value == 0)
sum(df_wynik$option_value <=1 ) - sum(df_wynik$option_value <= 0.01)
sum(df_wynik$option_value <=0.5 ) - sum(df_wynik$option_value <= 0.01)
vect <- c(1,2, seq(1,10, by =1))
vect
paste(1:12)
breaks <- c( 0, 0.01, 0.5, 1, 3, 5, 7,
seq(10, max(df_wynik$option_value), by = 10))
paste(breaks)
paste(breaks, "<=")
paste("<", breaks)
paste("=<", breaks)
breaki <- c( 0, 0.01, 0.5, 1, 3, 5, 7,
seq(10, max(df_wynik$option_value), by = 10))
df_wynik$option_value.f <- cut(df_wynik$option_value,
breaks = breaki,
labels = paste("=<", breaki), include.lowest = T)
length(breaki)
lebgth(paste("=<", breaki))
length(paste("=<", breaki))
breaki <- c( 0, 0.01, 0.5, 1, 3, 5, 7,
seq(10, max(df_wynik$option_value), by = 10))
labelki = paste("=<", breaki)
df_wynik$option_value.f <- cut(df_wynik$option_value,
breaks = breaki,
labels = labelki, include.lowest = T)
breaki
labelki
?cut
df_wynik$option_value.f <- cut(df_wynik$option_value,
breaks = breaki,
labels = labelki)
df_wynik$option_value.f <- cut(df_wynik$option_value,
breaks = breaki,
include.lowest = T)
g2 <- ggplot(df_wynik, aes(x = S, t)) +
geom_tile(aes(fill = option_value.f)) +
geom_text(aes(label = round(option_value.f, 3))) +
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
scale_fill_manual(values = RColorBrewer::brewer.pal(9, "PiYG")) # Use RColorBrewer for discrete categories
g2
g2 <- ggplot(df_wynik, aes(x = S, t)) +
geom_tile(aes(fill = option_value.f)) +
geom_text(aes(label = option_value.f)) +
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
scale_fill_manual(values = RColorBrewer::brewer.pal(9, "PiYG")) # Use RColorBrewer for discrete categories
g2
g2 <- ggplot(df_wynik, aes(x = S, t)) +
geom_tile(aes(fill = option_value.f)) +
geom_text(aes(label = option_value.f)) +
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
scale_fill_manual(values = RColorBrewer::brewer.pal(20, "PiYG")) # Use RColorBrewer for discrete categories
g2
g2 <- ggplot(df_wynik, aes(x = S, t)) +
geom_tile(aes(fill = option_value.f)) +
geom_text(aes(label = option_value.f))
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
#scale_fill_manual(values = RColorBrewer::brewer.pal(20, "PiYG")) # Use RColorBrewer for discrete categories
g2
g2 <- ggplot(df_wynik, aes(x = S, t)) +
geom_tile(aes(fill = option_value.f))
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
#scale_fill_manual(values = RColorBrewer::brewer.pal(20, "PiYG")) # Use RColorBrewer for discrete categories
g2
g2 <- ggplot(df_wynik, aes(x = S, t, colour = option_value.f)) +
geom_tile(aes(fill = option_value.f)) + labs()
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
#scale_fill_manual(values = RColorBrewer::brewer.pal(20, "PiYG")) # Use RColorBrewer for discrete categories
g2
g2 <- ggplot(df_wynik, aes(x = S, t, colour = option_value.f)) +
geom_tile() + labs()
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
#scale_fill_manual(values = RColorBrewer::brewer.pal(20, "PiYG")) # Use RColorBrewer for discrete categories
g2
g2 <- ggplot(df_wynik, aes(x = S, t, colour = option_value.f)) +
geom_tile(aes(fill = option_value.f)) + labs(colour = 'wartosc')
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
#scale_fill_manual(values = RColorBrewer::brewer.pal(20, "PiYG")) # Use RColorBrewer for discrete categories
g2
g2 <- ggplot(df_wynik, aes(x = S, t)) +
geom_tile(aes(fill = option_value.f)) + labs(colour = 'wartosc')
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
#scale_fill_manual(values = RColorBrewer::brewer.pal(20, "PiYG")) # Use RColorBrewer for discrete categories
g2
g2 <- ggplot(df_wynik, aes(x = t, S)) +
geom_tile(aes(fill = option_value.f)) + labs(title = 'Wartosci opcji EC@2150, dla bariery 2400')
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
#scale_fill_manual(values = RColorBrewer::brewer.pal(20, "PiYG")) # Use RColorBrewer for discrete categories
g2
wynik = finite_diference_call(dS = dS, dt = dt, K = K, r = r, zmiennosc_roczna = zmiennosc_roczna, bariera = bariera, amerykanska = T)
g2 <- ggplot(df_wynik, aes(x = t, S)) +
geom_tile(aes(fill = option_value.f)) + labs(title = 'Wartosci opcji AC@2150, dla bariery 2400')
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
#scale_fill_manual(values = RColorBrewer::brewer.pal(20, "PiYG")) # Use RColorBrewer for discrete categories
g2
breaki <- c( 0, 0.01, 1, 3, 5,
seq(10, max(df_wynik$option_value), by = 10))
g2 <- ggplot(df_wynik, aes(x = t, S)) +
geom_tile(aes(fill = option_value.f)) + labs(title = 'Wartosci opcji AC@2150, dla bariery 2400')
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
#scale_fill_manual(values = RColorBrewer::brewer.pal(20, "PiYG")) # Use RColorBrewer for discrete categories
g2
wynik = finite_diference_call(dS = dS, dt = dt, K = K, r = r, zmiennosc_roczna = zmiennosc_roczna, bariera = bariera, amerykanska = T)
df_wynik <- to_df(wynik, dt)
breaki <- c( 0, 0.01, 1, 3, 5,
seq(10, max(df_wynik$option_value), by = 10))
g2 <- ggplot(df_wynik, aes(x = t, S)) +
geom_tile(aes(fill = option_value.f)) + labs(title = 'Wartosci opcji AC@2150, dla bariery 2400')
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
#scale_fill_manual(values = RColorBrewer::brewer.pal(20, "PiYG")) # Use RColorBrewer for discrete categories
g2
breaki <- c( 0, 0.01, 1, 3, 5,
seq(10, max(df_wynik$option_value), by = 10))
df_wynik$option_value.f <- cut(df_wynik$option_value,
breaks = breaki,
include.lowest = T)
g2 <- ggplot(df_wynik, aes(x = t, S)) +
geom_tile(aes(fill = option_value.f)) + labs(title = 'Wartosci opcji AC@2150, dla bariery 2400')
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
#scale_fill_manual(values = RColorBrewer::brewer.pal(20, "PiYG")) # Use RColorBrewer for discrete categories
g2
breaki <- c( 0, 0.01, 0.5, 1, 3, 5, 7,
seq(10, max(df_wynik$option_value), by = 10))
labelki = paste("=<", breaki)
df_wynik$option_value.f <- cut(df_wynik$option_value,
breaks = breaki,
include.lowest = T)
g2 <- ggplot(df_wynik, aes(x = t, S)) +
geom_tile(aes(fill = option_value.f)) + labs(title = 'Wartosci opcji AC@2150, dla bariery 2400')
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
#scale_fill_manual(values = RColorBrewer::brewer.pal(20, "PiYG")) # Use RColorBrewer for discrete categories
g2
bariera <- 1900
#dla EP 3*k
dt <- 1/(zmiennosc_roczna^2*ceiling(K * 3/dS)^2)
wynik = finite_diference_put(dS = dS, dt = dt, K = K, r = r, zmiennosc_roczna = zmiennosc_roczna, bariera = bariera)
df_wynik <- to_df(wynik, dt)
breaki <- c( 0, 0.01, 0.5, 1, 3, 5, 7,
seq(10, max(df_wynik$option_value), by = 10))
labelki = paste("=<", breaki)
df_wynik$option_value.f <- cut(df_wynik$option_value,
breaks = breaki,
include.lowest = T)
g2 <- ggplot(df_wynik, aes(x = t, S)) +
geom_tile(aes(fill = option_value.f)) + labs(title = 'Wartosci opcji AC@2150, dla bariery 2400')
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
#scale_fill_manual(values = RColorBrewer::brewer.pal(20, "PiYG")) # Use RColorBrewer for discrete categories
g2
breaki <- c( 0, 0.01, 0.5, 1, 3, 5, 7,
seq(10, max(df_wynik$option_value), by = 10))
labelki = paste("=<", breaki)
df_wynik$option_value.f <- cut(df_wynik$option_value,
breaks = breaki,
include.lowest = T)
g2 <- ggplot(df_wynik, aes(x = t, S)) +
geom_tile(aes(fill = option_value.f)) + labs(title = 'Wartosci opcji EP@2150, dla bariery 1900')
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
#scale_fill_manual(values = RColorBrewer::brewer.pal(20, "PiYG")) # Use RColorBrewer for discrete categories
g2
wynik = finite_diference_put(dS = dS, dt = dt, K = K, r = r, zmiennosc_roczna = zmiennosc_roczna, bariera = bariera, amerykanska = T)
df_wynik <- to_df(wynik, dt)
breaki <- c( 0, 0.01, 0.5, 1, 3, 5, 7,
seq(10, max(df_wynik$option_value), by = 10))
labelki = paste("=<", breaki)
df_wynik$option_value.f <- cut(df_wynik$option_value,
breaks = breaki,
include.lowest = T)
g2 <- ggplot(df_wynik, aes(x = t, S)) +
geom_tile(aes(fill = option_value.f)) + labs(title = 'Wartosci opcji AP@2150, dla bariery 1900')
# Given that factors have discrete levels, we need to use scale_fill_manual instead of scale_fill_continuous
#scale_fill_manual(values = RColorBrewer::brewer.pal(20, "PiYG")) # Use RColorBrewer for discrete categories
g2
library(rgl)
library(plotly)
library(ggplot2)
library(fExoticOptions)
library(gridExtra)
library(manipulate)
pay_off = function(S, K, czy_call = T) if(czy_call) pmax(S - K, 0) else pmax(K - S, 0)
delta = function(v, dS) (v[1] - v[3]) / (2 * dS)
gamma = function(v, dS) (v[1] - 2 * v[2] + v[3])  / dS^2
wycena = function(v, dt, dS, S, r, zmiennosc_roczna){
d = delta(v, dS)
g = gamma(v, dS)
if (length(zmiennosc_roczna) != 1){
if (g < 0) zmiennosc_roczna = zmiennosc_roczna[1]
else zmiennosc_roczna = zmiennosc_roczna[2]
}
a = zmiennosc_roczna^2 * S^2 / 2
b = r * S
c = -r
return(v[2] + (a * g + b * d + c * v[2]) * dt)
}
wycena_douglas_explicit = function(v, dt, dS){
return((v[3] - 2 * v[2] + v[3])*dt/dS^2 + v[2])
}
finite_diference_call = function(dS, dt, t = 0.837, K, r, zmiennosc_roczna, bariera, amerykanska = F, niepewnosc = FALSE)
{
if(niepewnosc){
V = function(v, S) wycena(v = v, dt = dt, dS = dS, S = S, r = r, zmiennosc_roczna = zmiennosc_roczna[floor(runif(1, 1, length(zmiennosc_roczna)))])}
else{
V = function(v, S) wycena(v = v, dt = dt, dS = dS, S = S, r = r, zmiennosc_roczna = zmiennosc_roczna)}
S_v = seq(0, bariera, dS)
t_v = seq(0, t, dt)
n_S = length(S_v)
n_t = length(t_v)
siatka = matrix(0, n_S, n_t)
siatka[, n_t] = pay_off(S = S_v, K = K, czy_call = T)
siatka[n_S, n_t] = 0
for (j in (n_t - 1):1) {
for (i in (n_S - 1):2) {
siatka[i, j] <- ifelse(amerykanska == F, V(siatka[(i + 1):(i - 1), j + 1], S_v[i]), max(V(siatka[(i + 1):(i - 1), j + 1], S_v[i]), pay_off(S_v[i], K)))
if (sum(siatka[i:(i + 1), j + 1]) == 0) break
}
}
row.names(siatka) = S_v
return(siatka)
}
finite_diference_put = function(dS, dt, t = 0.837, K, r, zmiennosc_roczna, bariera, amerykanska = F, niepewnosc = FALSE){
if(niepewnosc){
V = function(v, S) wycena(v = v, dt = dt, dS = dS, S = S, r = r, zmiennosc_roczna = zmiennosc_roczna[floor(runif(1, 1, length(zmiennosc_roczna)))])}
else{
V = function(v, S) wycena(v = v, dt = dt, dS = dS, S = S, r = r, zmiennosc_roczna = zmiennosc_roczna)}
S_v = seq(bariera, K * 3, dS) #chyba cena wykonania * 3 miaa być
t_v = seq(0, t, dt)
n_S = length(S_v)
n_t = length(t_v)
siatka = matrix(0, n_S, n_t)
siatka[, n_t] = pay_off(S = S_v, K = K, czy_call = F)
siatka[1, n_t] = 0
for (j in (n_t - 1):1) {
for (i in (2:(n_S - 1))) {
siatka[i, j] <- ifelse(amerykanska == F, V(siatka[(i + 1):(i - 1), j + 1], S_v[i]), max(V(siatka[(i + 1):(i - 1), j + 1], S_v[i]), pay_off(S_v[i], K, czy_call = F)))
if (sum(siatka[i:(i+1), j + 1]) == 0) break
}
}
row.names(siatka) = S_v
return(siatka)
}
to_df <- function(result, dt)
{
data.frame(S = rep(as.numeric(row.names(result)), times = ncol(result)), t = rep(seq(0, 0.837, dt), rep(nrow(result), ncol(result))), option_value = as.vector(result))
}
to_df_dywidendy <- function(result, dt, kwotowa = T, dywidenda, kiedy, czy_put = F)
{
t <- seq(0, 0.837, dt)
ile <- max(which(t < kiedy))
if(kwotowa)
{
if(czy_put) dywidenda <- -dywidenda
S <- c(rep(as.numeric(row.names(result)) + dywidenda, times = ile), rep(as.numeric(row.names(result)), times = ncol(result) - ile))
} else {
if(czy_put) dywidenda <- -dywidenda
S <- c(rep(as.numeric(row.names(result))/(1-dywidenda), times = ile), rep(as.numeric(row.names(result)), times = ncol(result) - ile))
}
data.frame(S = S, t = rep(seq(0, 0.837, dt), rep(nrow(result), ncol(result))), option_value = as.vector(result))
}
cena_opcji<- function(df_wynik, K, r, sigma, czy_put = F, bariera)
{
type <- ifelse(czy_put, "pdo", "cuo")
df <- data.frame(S = 0, t = 0, option_value = 0)
for(j in sort(unique(df_wynik$t)))
{
for(i in sort(unique(df_wynik$S)))
{
df <- rbind(df, c(i, j, StandardBarrierOption(TypeFlag = type, S = i, X = K, H = bariera, r = r, sigma = sigma, K = 0, Time = 0.837 - j, b = 0)@price))
}
}
df$option_value[is.na(df$option_value)] <- 0 #dla ceny akcji == 0
df[-1,]
}
douglas_scheme_call = function(dS, dt, t = 0.837, K, r, zmiennosc_roczna, bariera, amerykanska = F)
{
S_v = seq(0, bariera, dS)
t_v = seq(0, t, dt)
n_S = length(S_v)
n_t = length(t_v)
siatka = matrix(0, n_S, n_t)
siatka[, n_t] = pay_off(S = S_v, K = K, czy_call = T)
siatka[n_S, n_t] = 0
for (j in (n_t - 1):1) {
for (i in (n_S - 1):2) {
siatka[i, j] <- ifelse(amerykanska == F, wycena_douglas_explicit(v = siatka[(i + 1):(i - 1), j + 1], dt = dt, dS = dS), max(wycena_douglas_explicit(v = siatka[(i + 1):(i - 1), j + 1], dt = dt, dS = dS), pay_off(S_v[i], K)))
if (sum(siatka[i:(i + 1), j + 1]) == 0) break
}
}
row.names(siatka) = S_v
return(siatka)
}
###################################
#CALL##############################
###################################
dS <- 50
zmiennosc_roczna <- 0.2
bariera <- 2400
K <- 2150
r <- 0.01
dt <- 1/(zmiennosc_roczna^2*ceiling(bariera/dS)^2)
#europejska
wynik_niepewnosc = finite_diference_call(dS = dS, dt = dt, K = K, r = r, zmiennosc_roczna = seq(0.15, 0.25, by = 0.05), bariera = bariera, niepewnosc = TRUE)
wynik = finite_diference_call(dS = dS, dt = dt, K = K, r = r, zmiennosc_roczna = zmiennosc_roczna, bariera = bariera)
ncol(wynik)
c(wynik, wynik)
a <- c(wynik, wynik)
49*78
list(wynik, wynik)
list[1]
a <-list(wynik, wynik)
a[1]
a[1] == wynik
